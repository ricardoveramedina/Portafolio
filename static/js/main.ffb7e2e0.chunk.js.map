{"version":3,"sources":["components/About/style.module.scss","components/Resume/style.module.scss","components/Resume/Job/style.module.scss","components/About/index.js","components/Skills/Tool/index.js","components/Skills/index.js","components/Resume/Job/index.js","components/Resume/index.js","components/BackgroundLayer/index.js","components/Clouds/index.js","components/ParallaxElements/index.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","About","props","ParallaxLayer","parallax","url","useState","isDisplay","transitions","useTransition","from","transform","opacity","enter","leave","offset","speed","className","styles","about","map","item","key","div","style","display","Tool","toolName","imgUrl","toLowerCase","src","alt","Skills","tools","setTools","setIsDisplay","useEffect","transitionsList","config","duration","trail","tag","onChange","inView","entry","items","Job","jobData","job","title","company","date","city","description","Resume","isDisplayResume","setIsDisplayResume","jobsData","setJobsData","Title","JobView","keys","id","data","factor","resume","console","log","BackgroundLayer","Clouds","Cloud","paralaxName","offSet","cloudNum","Array","x","i","ParallaxElements","backgroundImage","backgroundSize","name","wrap","App","useRef","ref","pages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ffb7e2e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"parallax\":\"style_parallax__2998C\",\"about\":\"style_about__3ibC8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"parallax\":\"style_parallax__2VptI\",\"resume\":\"style_resume__1Z6nF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"job\":\"style_job__3cZ5o\"};","import React, { useState } from 'react';\nimport { useTransition, animated } from 'react-spring';\nimport styles from './style.module.scss';\n\nexport default function About(props) {\n  const { ParallaxLayer, parallax, url } = props;\n\n  const [isDisplay, setIsDisplay] = useState(true);\n  const transitions = useTransition(isDisplay, null, {\n    from: { transform: `translateX(600px)`, opacity: 0 },\n    enter: { transform: `translateX(0)`, opacity: 1 },\n    leave: { transform: `translateX(50px)`, opacity: 0 },\n  });\n\n  return (\n    <ParallaxLayer\n      offset={0}\n      speed={0.6}\n      //onClick={() => parallax.current.scrollTo(1)}\n      className={styles.parallax}\n    >\n      <section className={styles.about}>\n        {transitions.map(\n          ({ item, key, props }) =>\n            item && (\n              <animated.div\n                key={key}\n                style={{ ...props, display: 'inline-block' }}\n              >\n                <h5>Hey there, I'm Ricardo vera,</h5>\n                <h3>Full-Stack developer.</h3>\n                <p>\n                  I'm a chilean living in Tokyo who loves to develop new things\n                  for awesome people.\n                </p>\n                <button className=\"resumeBtn\">CV my resume</button>\n                <p>\n                  You can send me an via email or also you can check my profile\n                  in Linkedin.\n                </p>\n              </animated.div>\n            )\n        )}\n        {/* <img src={url('bash')} style={{ width: '20%' }} alt=\"bash\" /> */}\n      </section>\n\n      {/* <img src={url('server')} style={{ width: '20%' }} alt=\"server\" /> */}\n    </ParallaxLayer>\n  );\n}\n","import React from 'react';\nimport './style.scss';\n\nexport default function Tool(props) {\n  const { toolName } = props;\n  const imgUrl = './svg/' + toolName.toLowerCase() + '.svg';\n  return (\n    <div className={toolName.toLowerCase() + ' tool'}>\n      <img src={imgUrl} alt={toolName} />\n      <label>{toolName}</label>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { InView } from 'react-intersection-observer';\nimport { useTransition, animated } from 'react-spring';\nimport { Transition } from 'react-spring/renderprops';\nimport Tool from './Tool';\nimport './style.scss';\n\nexport default function Skills(props) {\n  const { ParallaxLayer } = props;\n\n  const [tools, setTools] = useState();\n  const [isDisplay, setIsDisplay] = useState(false);\n\n  useEffect(() => {\n    isDisplay\n      ? setTools([\n          'ReactJS',\n          'NodeJS',\n          'Javascript',\n          'HTML5',\n          'CSS3',\n          'Python',\n          'Java',\n          'PHP',\n          'Wordpress',\n          'MySQL',\n          'Linux',\n          'Docker',\n          'Git',\n          'Slack',\n        ])\n      : setTools();\n  }, [isDisplay]);\n\n  const transitionsList = useTransition(tools, null, {\n    config: { duration: 1000 },\n    trail: isDisplay && 80,\n    from: { transform: 'translate3d(0,-400px,0)', opacity: 0 },\n    enter: { transform: 'translate3d(0,200px,0)', opacity: 1 },\n    leave: { transform: 'translate3d(0,-100px,0)', opacity: 0 },\n  });\n\n  return (\n    <ParallaxLayer\n      offset={1}\n      speed={0.3}\n      //onClick={() => parallax.current.scrollTo(2)}\n      className=\"skills\"\n    >\n      <InView\n        tag=\"div\"\n        onChange={(inView, entry) => {\n          inView && !isDisplay ? setIsDisplay(true) : setIsDisplay(false);\n        }}\n      >\n        <Transition\n          items={isDisplay}\n          trail={isDisplay && 80}\n          config={{ duration: 1000 }}\n          from={{ transform: 'translate3d(0,-400px,0)', opacity: 0 }}\n          enter={{ transform: 'translate3d(0,200px,0)', opacity: 1 }}\n          leave={{ transform: 'translate3d(0,-100px,0)', opacity: 0 }}\n        >\n          {(isDisplay) =>\n            isDisplay\n              ? (props) => <h3 style={{ ...props }}>Skill List:</h3>\n              : (props) => ''\n          }\n        </Transition>\n\n        <div className=\"list\">\n          <ul>\n            {transitionsList.map(\n              ({ item, key, props }) =>\n                item && (\n                  <animated.div\n                    key={key}\n                    style={{ ...props, display: 'inline-block' }}\n                  >\n                    <li>\n                      <Tool toolName={item} />\n                    </li>\n                  </animated.div>\n                )\n            )}\n          </ul>\n        </div>\n      </InView>\n    </ParallaxLayer>\n  );\n}\n{\n  /* <img src={url('bash')} style={{ width: '40%' }} alt=\"bash\" /> */\n}\n","import React, { Fragment } from 'react';\nimport styles from './style.module.scss';\nexport default function Job(props) {\n  const { jobData } = props;\n  return (\n    <div className={styles.job}>\n      <h4>\n        {jobData.title} - {jobData.company}\n      </h4>\n      <h5>\n        {jobData.date} - {jobData.city}\n      </h5>\n\n      <p>{jobData.description}</p>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { InView } from 'react-intersection-observer';\nimport { Transition } from 'react-spring/renderprops';\nimport Job from './Job';\nimport styles from './style.module.scss';\nimport data from './resumeData.json';\n\nexport default function Resume(props) {\n  const { ParallaxLayer } = props;\n  const [isDisplayResume, setIsDisplayResume] = useState(false);\n  const [jobsData, setJobsData] = useState();\n\n  useEffect(() => {\n    isDisplayResume ? setJobsData(data) : setJobsData();\n  }, [isDisplayResume]);\n\n  function Title(props) {\n    const { isDisplayResume, title } = props;\n    return (\n      <Transition\n        items={isDisplayResume}\n        trail={isDisplayResume && 50}\n        config={{ duration: 500 }}\n        from={{ transform: 'translate3d(0,-400px,0)', opacity: 0 }}\n        enter={{ transform: 'translate3d(0,0px,0)', opacity: 1 }}\n        leave={{ transform: 'translate3d(0,-400px,0)', opacity: 0 }}\n      >\n        {(isDisplay) =>\n          isDisplay\n            ? (props) => <h3 style={{ ...props }}>{title}:</h3>\n            : (props) => ''\n        }\n      </Transition>\n    );\n  }\n\n  function JobView(props) {\n    const { isDisplay } = props;\n    return (\n      <Transition\n        items={jobsData}\n        trail={isDisplay && 50}\n        config={{ duration: 1000 }}\n        keys={(item) => item.id}\n        from={{ transform: 'translate3d(0,-400px,0)', opacity: 0 }}\n        enter={{ transform: 'translate3d(0,0px,0)', opacity: 1 }}\n        leave={{ transform: 'translate3d(0,-400px,0)', opacity: 0 }}\n      >\n        {(item) => (props) => (\n          <div style={{ ...props }}>\n            <Job jobData={item} />\n          </div>\n        )}\n      </Transition>\n    );\n  }\n\n  return (\n    <ParallaxLayer\n      offset={2.5}\n      speed={0}\n      factor={2}\n      className={styles.parallax}\n      //onClick={() => parallax.current.scrollTo(0)}\n    >\n      <section className={styles.resume}>\n        <InView\n          tag=\"div\"\n          onChange={(inView, entry) => {\n            /* inView && !isDisplayResume\n              ? setIsDisplayResume(true)\n              : setIsDisplayResume(false); */\n            if (inView && !isDisplayResume) {\n              setIsDisplayResume(true);\n              console.log('inView', inView);\n            } else {\n              setIsDisplayResume(false);\n              console.log('inView', inView);\n            }\n          }}\n        >\n          <Title isDisplayResume={isDisplayResume} title={'Work Experience'} />\n          {isDisplayResume && jobsData && (\n            <JobView isDisplay={isDisplayResume} />\n          )}\n        </InView>\n      </section>\n      {/*  <img\n        src={url('clients-main')}\n        style={{ width: '40%' }}\n        alt=\"clients-main\"\n      /> */}\n    </ParallaxLayer>\n  );\n}\n","import React, { Fragment } from 'react';\nimport './style.scss';\n\nexport default function BackgroundLayer(props) {\n  const { ParallaxLayer } = props;\n  return (\n    <Fragment>\n      <ParallaxLayer factor={2} offset={1} speed={1} className=\"background1\" />\n      <ParallaxLayer\n        factor={4.5}\n        offset={2}\n        speed={1}\n        className=\"background2\"\n      />\n    </Fragment>\n  );\n}\n","import React, { Fragment } from 'react';\nimport './style.scss';\n\nexport default function Clouds(props) {\n  const { ParallaxLayer, url } = props;\n\n  const Cloud = (props) => {\n    const { paralaxName, offSet, speed, cloudNum } = props;\n\n    return (\n      <ParallaxLayer offset={offSet} speed={speed} className={paralaxName}>\n        {[...Array(cloudNum)].map((x, i) => (\n          <img\n            alt=\"cloudtest\"\n            src={url('cloud')}\n            key={paralaxName + i}\n            className={'cloud' + (i + 1)}\n          />\n        ))}\n      </ParallaxLayer>\n    );\n  };\n\n  return (\n    <Fragment>\n      <Cloud\n        ParallaxLayer={ParallaxLayer}\n        paralaxName={'parallaxLayer1'}\n        offSet={1}\n        speed={0.8}\n        cloudNum={2}\n      />\n      <Cloud\n        ParallaxLayer={ParallaxLayer}\n        paralaxName={'parallaxLayer2'}\n        offSet={1.75}\n        speed={0.5}\n        cloudNum={2}\n      />\n      <Cloud\n        ParallaxLayer={ParallaxLayer}\n        paralaxName={'parallaxLayer3'}\n        offSet={1}\n        speed={0.2}\n        cloudNum={2}\n      />\n      <Cloud\n        ParallaxLayer={ParallaxLayer}\n        paralaxName={'parallaxLayer4'}\n        offSet={(1, 6)}\n        speed={-0.1}\n        cloudNum={3}\n      />\n      <Cloud\n        ParallaxLayer={ParallaxLayer}\n        paralaxName={'parallaxLayer5'}\n        offSet={(2, 6)}\n        speed={0.4}\n        cloudNum={2}\n      />\n    </Fragment>\n  );\n}\n","import React, { Fragment } from 'react';\nimport BackgroundLayer from '../BackgroundLayer';\nimport Clouds from '../Clouds';\nimport './style.scss';\n\nexport default function ParallaxElements(props) {\n  const { ParallaxLayer, url } = props;\n\n  return (\n    <Fragment>\n      <BackgroundLayer ParallaxLayer={ParallaxLayer} />\n\n      <ParallaxLayer\n        offset={0}\n        speed={0}\n        factor={3}\n        style={{ backgroundImage: url('stars', true), backgroundSize: 'cover' }}\n      />\n\n      <ParallaxLayer offset={1.1} speed={-0.3} className=\"satellite\">\n        <img alt=\"satellite4\" src={url('satellite4')} />\n      </ParallaxLayer>\n\n      {/* Random Clouds  */}\n      <Clouds ParallaxLayer={ParallaxLayer} url={url} />\n\n      <ParallaxLayer offset={3.6} speed={-0.4} className=\"earth\">\n        <img src={url('earth')} alt=\"earth\" />\n      </ParallaxLayer>\n      {/* \n      <ParallaxLayer\n        offset={2.3}\n        speed={-0.3}\n        style={{\n          backgroundSize: '30%',\n          marginLeft: '55%',\n          opacity: '0.4',\n          backgroundImage: url('clients-main', true),\n          //backgroundImage: url('clients', true),\n        }}\n      /> */}\n    </Fragment>\n  );\n}\n","import React, { useRef } from 'react';\nimport { Parallax, ParallaxLayer } from 'react-spring/renderprops-addons';\nimport About from '../components/About';\nimport Skills from '../components/Skills';\nimport Resume from '../components/Resume';\nimport ParallaxElements from '../components/ParallaxElements';\n\nconst url = (name, wrap = false) =>\n  `${\n    wrap ? 'url(' : ''\n  }https://awv3node-homepage.surge.sh/build/assets/${name}.svg${\n    wrap ? ')' : ''\n  }`;\nfunction App() {\n  const parallax = useRef();\n  return (\n    <Parallax ref={parallax} pages={4.5}>\n      {/* Elements creations with parallax */}\n      <ParallaxElements ParallaxLayer={ParallaxLayer} url={url} />\n      {/* sections */}\n\n      <About ParallaxLayer={ParallaxLayer} url={url} parallax={parallax} />\n      <Skills ParallaxLayer={ParallaxLayer} url={url} parallax={parallax} />\n      <Resume ParallaxLayer={ParallaxLayer} url={url} parallax={parallax} />\n    </Parallax>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// TODO: order App.js create components for parallax\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}